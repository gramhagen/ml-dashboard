Obeya
=====

Obeya (Japanese for War Room) is a Flask application that provides scalable and beautiful plotting and interaction.

Tech Stack
----------

Obeya is built on the following technologies:

Back end
````````

- Docker_ : to simplify deployment
- Nginx_ : high-performance reverse proxy to speed up web page serving
- uWSGI_ : a fast and light-weight WSGI server
- Flask_ : a python microframework that makes web app development fun

.. _Docker: https://www.docker.com/
.. _Nginx: https://www.nginx.com/resources/wiki/
.. _uWSGI: https://uwsgi-docs.readthedocs.org/en/latest/
.. _Flask: http://flask.pocoo.org/

Front end
`````````

-  `Node.js`_ : enable common front-end tools, like those below
-  Gulp_ : automation toolkit to streamline management of web assets
-  Material-Design-Lite_ : adds Material Design look and feel to pages
-  Material-Design-Icons_ : adds library of icons customized for Material Design
-  `Plotly.js`_ : make beautiful charts easily

.. _Node.js: https://nodejs.org/
.. _Gulp: https://www.npmjs.com/package/gulp/
.. _Material-Design-Lite: https://www.getmdl.io/
.. _Material-Design-Icons: https://design.google.com/icons/
.. _Plotly.js: https://plot.ly/javascript/

Installation
------------

1. Clone the repo

.. code-block:: bash

    # git the repo
    git clone https://github.com/gramhagen/obeya
    cd obeya

2. Install the applicaiton

    a. Using Docker

    .. code-block:: bash

        # build the container
        docker build -t obeya deploy

        # run the container ENV can be [<dev>, test, prod], expose ports 80 and 9001
        docker run -e "ENV=prod" -p 80:80 -p 9001:9001 -it obeya

    b. Local Installation (the following directories must be installed, or config files should be modified)

            - /usr/local/virtualenvs : to house python virtual environments
            - /usr/local/obeya : where the source code is
            - /var/run/obeya : where the uwsgi pid and socket files go
            - /var/log/obeya : where all logs are written

    .. code-block:: bash

        # create obeya virtualenv
        mkvirtualenv /usr/local/virtualenvs/obeya
        pip install --upgrade pip
        pip install -r requirements.txt
        python manage.py init

        # assuming node is installed
        # install node packages and build web assets
        cd application
        npm install
        npm run build

        # using nginx shouldn't be necessary for local development

Configuration
-------------

The application is configured via files in the config folder. The flask.tmp file can be modified with database
authentication information, but otherwise the files do not need to be adjusted unless you intend to tweak params or
change directories used.

- flask.tmp : template file for flask configuration, customize logging and database authentication
- nginx.conf : nginx configuration file
- supervisor.conf : supervisor configuration file, controls execution of uwsgi and nginx
- uwsgi.ini : controls uwsgi execution
- uwsgi_params : params used to coordinate between uwsgi and nginx

Running the app
---------------

Run the application locally just with flask:

.. code-block:: bash

    # from root dir, using appropriate venv
    python manage.py runserver

Run the application locally with uwsgi

.. code-block:: bash

    # from root dir, using appropriate venv, ENV can bd [<dev>, test, prod]
    # you may need to create pid and log folders with correct permissions (/var/run/uwsgi, /var/log/obeya)
    uwsgi --ini config/uwsgi.ini --http-socket 0.0.0.0:80 --env ENV='dev'

Application Management
----------------------

General management tasks have been consolidated into the manage.py module using Flask-Script_.

.. _Flask-Script: http://flask-script.readthedocs.org/en/latest/

.. code-block:: bash

    # from root dir, using appropriate venv

    # get help info
    python manage.py

The following options are available:

    - lint : use pylint to lint all python files
    - test : use pytest to test run all tests in tests dir
    - build_docs : build docs automatically from docstrings in code
    - publish_docs : publish doc .rst files to html
    - init : creates secret key for Flask and imports flask configuration template into instance folder
    - runserver : run the server locally just using Flask's built in server, use -? for more options
    - clean : clean up autogenerated files (useful prior to git commits or deployments)
    - archive : archive files for deployment, puts them in project.zip folder under deploy folder
